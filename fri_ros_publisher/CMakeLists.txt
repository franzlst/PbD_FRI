#
# The find_package macro for Orocos-RTT works best with
# cmake >= 2.6.3
#
cmake_minimum_required(VERSION 2.6.3)

# Activate C++11 features
ADD_DEFINITIONS(
    -std=gnu++0x
)

#
# This creates a standard cmake project. You may extend this file with
# any cmake macro you see fit.
#
project(fri_ros_publisher)

set (ROS_ROOT $ENV{ROS_ROOT} )
if (ROS_ROOT)
   include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
   rosbuild_init()
   rosbuild_find_ros_package( rtt )
   set( RTT_HINTS HINTS ${rtt_PACKAGE_PATH}/install )
endif()

# Use 'source orocos_toolchain/env.sh' if the command below fails:
find_package(OROCOS-RTT QUIET)
if (NOT OROCOS-RTT_FOUND)
  message (FATAL_ERROR "\nCould not find Orocos. Please use the shell command\n 'source orocos_toolchain/env.sh' and then run cmake again.")
endif()

# Defines the orocos_* cmake macros. See that file for additional
# documentation.
include( ${OROCOS-RTT_USE_FILE_PATH}/UseOROCOS-RTT.cmake )

# Rest of the configuration is in src/
add_subdirectory( src )
#
# Building a typekit using typegen (recommended):
#
# Creates a typekit library libfri_ros_publisher-types-<target>.so
# and installs in the directory lib/orocos/@target@/fri_ros_publisher/types/
#
# The header will go in include/orocos/fri_ros_publisher/types/fri_ros_publisher/fri_ros_publisher-types.hpp
# So you can #include <fri_ros_publisher/fri_ros_publisher-types.hpp>
#
orocos_typegen_headers(include/fri_ros_publisher/fri_ros_publisher-types.hpp) # ...you may add multiple header files
#
# You may only have *ONE* orocos_typegen_headers statement in your toplevel CMakeFile.txt !



#
# Generates and installs our package. Must be the last statement such
# that it can pick up all above settings.
#
orocos_generate_package()
